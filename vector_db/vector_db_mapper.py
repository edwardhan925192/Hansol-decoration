# -*- coding: utf-8 -*-
"""vector_db_mapper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HvaMeYai3P2J7ccgiwQQZx9ZztZJZtG-
"""

def post_chunk_index(dictionary, chunk_overlap, chunk_size, min_chunk):
    def index_num_count(text):
        total_length = len(text)
        if total_length < chunk_size:
            return 1
        else:
            remaining_size = total_length - chunk_size
            additional_chunks = remaining_size // (chunk_size - chunk_overlap)
            last_chunk_size = remaining_size % (chunk_size - chunk_overlap)
            if last_chunk_size < min_chunk:
                last_chunk_count = 0
            else:
                last_chunk_count = 1
            return 1 + additional_chunks + last_chunk_count

    index_mapper = {}
    index_count = 0

    for key, value in dictionary.items():
        num_index = index_num_count(value)  # Count numbers of chunk generated
        indices = list(range(index_count, index_count + num_index))  # Create a list of indices for this key
        if key not in index_mapper:
            index_mapper[key] = indices  # Initialize with a list for new keys
        else:
            index_mapper[key].extend(indices)  # Extend the existing list for this key with new indices
        index_count += num_index

    return index_mapper